require 'active_support/core_ext/module/attribute_accessors'
require 'active_support/notifications'

module Landmark
  module Rails
    ############################################################################
    #
    # Attributes
    #
    ############################################################################

    # The parsed configuration file found at config/landmark.yml
    def self.config
      @config ||= YAML.load_file("#{::Rails.root}/config/landmark.yml")[::Rails.env] rescue nil
      @config ||= {}
    end
    
    # Retrieves the API key set for the environment.
    def self.api_key
      @api_key ||= config['api_key']
    end

    # A flag stating if tracking is enabled.
    def self.enabled
      return @enabled.nil? ? true : @enabled
    end

    def self.enabled=(value)
      @enabled = value
    end


    ############################################################################
    #
    # Static Methods
    #
    ############################################################################

    ####################################
    # Identify / Track
    ####################################

    # Invokes a method on the JavaScript library.
    def self.invoke(name, args)
      @invocations ||= []
      @invocations << {name: name, args:args.to_a}
    end

    # Identifies the current user in the request.
    def self.identify(user_id, traits={})
      invoke("identify", [user_id.to_s, traits])
    end

    # Tracks an action performed by the user.
    def self.track(action, properties={})
      invoke("track", [action, properties])
    end

    # Tracks the current page.
    def self.track_page_view(properties={})
      invoke("trackPageView", [properties])
    end


    ####################################
    # Utility
    ####################################

    # Clears all method invocations. This is called every time that
    # a request is started.
    def self.clear()
      @invocations = nil
      @enabled = true
    end


    ####################################
    # JavaScript
    ####################################

    # The JavaScript code generated by identification and tracking calls for
    # the current request.
    def self.javascript_tag()
      str = nil

      if enabled
        str = javascript_include_tag + 
        "<script>\n" +
        "window.landmark = window.landmark || [];\n" +
        javascript_invocation_script +
        "</script>\n"
      else
        str = "<script>window.landmark = window.landmark || [];</script>\n"
      end

      return str.html_safe
    end

    # The prologue tags that setup and load the remote Landmark JavaScript.
    def self.javascript_include_tag()
      "<script src=\"https://landmark.io/landmark.js\" data-api-key=#{Landmark::Rails.api_key.to_s.encode(:xml => :attr)}></script>\n"
    end

    # Lists all method invocations made.
    def self.javascript_invocation_script()
      @invocations.to_a.map do |invocation|
        "landmark.push(#{invocation[:name].to_json}, #{invocation[:args].to_a.map{|a| a.to_json}.join(', ')});\n"
      end.join("")
    end
  end
end

require 'landmark/rails/helper'
require 'landmark/rails/notifications'
require 'landmark/rails/version'